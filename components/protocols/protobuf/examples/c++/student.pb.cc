// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: student.proto

#include "student.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace student {
PROTOBUF_CONSTEXPR Course::Course(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , credit_(0){}
struct CourseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CourseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CourseDefaultTypeInternal() {}
  union {
    Course _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CourseDefaultTypeInternal _Course_default_instance_;
PROTOBUF_CONSTEXPR StudentInfo::StudentInfo(
    ::_pbi::ConstantInitialized)
  : course_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , age_(0)
  , sex_(0)
{}
struct StudentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StudentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StudentInfoDefaultTypeInternal() {}
  union {
    StudentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StudentInfoDefaultTypeInternal _StudentInfo_default_instance_;
}  // namespace student
static ::_pb::Metadata file_level_metadata_student_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_student_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_student_2eproto = nullptr;

const uint32_t TableStruct_student_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::student::Course, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::student::Course, credit_),
  PROTOBUF_FIELD_OFFSET(::student::Course, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::student::StudentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::student::StudentInfo, age_),
  PROTOBUF_FIELD_OFFSET(::student::StudentInfo, name_),
  PROTOBUF_FIELD_OFFSET(::student::StudentInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::student::StudentInfo, course_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::student::Course)},
  { 8, -1, -1, sizeof(::student::StudentInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::student::_Course_default_instance_._instance,
  &::student::_StudentInfo_default_instance_._instance,
};

const char descriptor_table_protodef_student_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstudent.proto\022\007student\"&\n\006Course\022\016\n\006cr"
  "edit\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\"d\n\013StudentInfo\022"
  "\013\n\003age\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\031\n\003sex\030\003 \001(\0162"
  "\014.student.Sex\022\037\n\006course\030\004 \003(\0132\017.student."
  "Course*\033\n\003Sex\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_student_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_student_2eproto = {
    false, false, 203, descriptor_table_protodef_student_2eproto,
    "student.proto",
    &descriptor_table_student_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_student_2eproto::offsets,
    file_level_metadata_student_2eproto, file_level_enum_descriptors_student_2eproto,
    file_level_service_descriptors_student_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_student_2eproto_getter() {
  return &descriptor_table_student_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_student_2eproto(&descriptor_table_student_2eproto);
namespace student {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_student_2eproto);
  return file_level_enum_descriptors_student_2eproto[0];
}
bool Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Course::_Internal {
 public:
};

Course::Course(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:student.Course)
}
Course::Course(const Course& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  credit_ = from.credit_;
  // @@protoc_insertion_point(copy_constructor:student.Course)
}

inline void Course::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
credit_ = 0;
}

Course::~Course() {
  // @@protoc_insertion_point(destructor:student.Course)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Course::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void Course::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Course::Clear() {
// @@protoc_insertion_point(message_clear_start:student.Course)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  credit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Course::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 credit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "student.Course.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Course::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.Course)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 credit = 1;
  if (this->_internal_credit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_credit(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.Course.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.Course)
  return target;
}

size_t Course::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.Course)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 credit = 1;
  if (this->_internal_credit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_credit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Course::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Course::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Course::GetClassData() const { return &_class_data_; }

void Course::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Course *>(to)->MergeFrom(
      static_cast<const Course &>(from));
}


void Course::MergeFrom(const Course& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.Course)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_credit() != 0) {
    _internal_set_credit(from._internal_credit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Course::CopyFrom(const Course& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.Course)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Course::IsInitialized() const {
  return true;
}

void Course::InternalSwap(Course* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(credit_, other->credit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Course::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_student_2eproto_getter, &descriptor_table_student_2eproto_once,
      file_level_metadata_student_2eproto[0]);
}

// ===================================================================

class StudentInfo::_Internal {
 public:
};

StudentInfo::StudentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  course_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:student.StudentInfo)
}
StudentInfo::StudentInfo(const StudentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      course_(from.course_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&age_, &from.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&age_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:student.StudentInfo)
}

inline void StudentInfo::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&age_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&age_)) + sizeof(sex_));
}

StudentInfo::~StudentInfo() {
  // @@protoc_insertion_point(destructor:student.StudentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StudentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void StudentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StudentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:student.StudentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  course_.Clear();
  name_.ClearToEmpty();
  ::memset(&age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sex_) -
      reinterpret_cast<char*>(&age_)) + sizeof(sex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StudentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 age = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "student.StudentInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // .student.Sex sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sex(static_cast<::student::Sex>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .student.Course course = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_course(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StudentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.StudentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 age = 1;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_age(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.StudentInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .student.Sex sex = 3;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sex(), target);
  }

  // repeated .student.Course course = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_course_size()); i < n; i++) {
    const auto& repfield = this->_internal_course(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.StudentInfo)
  return target;
}

size_t StudentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.StudentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .student.Course course = 4;
  total_size += 1UL * this->_internal_course_size();
  for (const auto& msg : this->course_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 age = 1;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // .student.Sex sex = 3;
  if (this->_internal_sex() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StudentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StudentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StudentInfo::GetClassData() const { return &_class_data_; }

void StudentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StudentInfo *>(to)->MergeFrom(
      static_cast<const StudentInfo &>(from));
}


void StudentInfo::MergeFrom(const StudentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.StudentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  course_.MergeFrom(from.course_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (from._internal_sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StudentInfo::CopyFrom(const StudentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.StudentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudentInfo::IsInitialized() const {
  return true;
}

void StudentInfo::InternalSwap(StudentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  course_.InternalSwap(&other->course_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StudentInfo, sex_)
      + sizeof(StudentInfo::sex_)
      - PROTOBUF_FIELD_OFFSET(StudentInfo, age_)>(
          reinterpret_cast<char*>(&age_),
          reinterpret_cast<char*>(&other->age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StudentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_student_2eproto_getter, &descriptor_table_student_2eproto_once,
      file_level_metadata_student_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace student
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::student::Course*
Arena::CreateMaybeMessage< ::student::Course >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::Course >(arena);
}
template<> PROTOBUF_NOINLINE ::student::StudentInfo*
Arena::CreateMaybeMessage< ::student::StudentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::StudentInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
